/*
 * Service Locator
 *
 * @author        Jaime Bueza
 *
 * The service locator pattern is a design pattern used in software development 
 * to encapsulate the processes involved in obtaining a service with a strong 
 * abstraction layer. This pattern uses a central registry known as the 
 * "service locator" which on request returns the information necessary 
 * to perform a certain task. - Wikipedia
 */var ServiceLocator={services:{},addService:function(a){return a?(this.services[a.name]=a,this):!1},getService:function(a){return this.services[a]},removeService:function(a){delete this.services[a]},removeServices:function(){return this.services={},!0},getServices:function(){return typeof this.services===undefined?!1:this.services}},Service=function(b,c,d){typeof d=="undefined"&&(d={});var e={method:d.method||function(){var a="get";return b.match(/^get/i)?a="get":b.match(/^add|del|update/i)&&(a="post"),a}(),jsonp:!1,wrapped:!1,template:!1,contentType:"application/json; charset=utf-8"};this.name=b,this.uri=c,this.options=$.extend({},e,d)};Service.prototype.invoke=function(a,b,c){if(!b)return!1;var d=this,e,f=d.getOptions()||{},g=f.method,h=d.getURI(),i=f.responseType||"JSON";return f.template&&(h=d.parse(h,a),g=="get"&&(a=null)),$.ajaxSetup({dataTypeString:i,dataType:f.jsonp?"jsonp":i,type:g,async:f.async||!0,cache:f.cache||!1,contentType:f.contentType||"application/json; charset=utf-8"}),g=="post"&&f.contentType.match(/application\/json/gi)?e=JSON.stringify(a):e=a,$.ajax({url:h,data:e}).success(function(a){i=="JSON"&&this.contentType.match(/javascript/g)&&(a=$.parseJSON(a)),f.wrapped&&(a=d.unwrap(a));if("undefined"!=typeof b){var e=[null,a,arguments[1],arguments[2]];typeof b=="function"?b.apply(c,e):c[b].apply(c,e)}}).error(function(){"undefined"!=typeof b&&b.apply(c||this,arguments)})},Service.prototype.getName=function(){return this.name},Service.prototype.getURI=function(){return this.uri},Service.prototype.getOptions=function(){return this.options},Service.prototype.unwrap=function(a){var b=this,c={};for(var d in a)if(typeof d=="string"&&d.substr(d.length-6,d.length)=="Result"){a=b.convert(a[d]);break}return a},Service.prototype.convert=function(a){var b={};for(var c in a)b[c]=a[c];return b},Service.prototype.option=function(){if(!arguments.length)return!1;if(arguments.length>2)return!1;if("string"!=typeof arguments[0])return!1;if(arguments.length==2)return this.options[arguments[0]]=arguments[1],this;if(arguments.length==1)return this.options[arguments[0]]},Service.prototype.parse=function(a,b){return arguments.length!=2?!1:"string"!=typeof a?!1:"object"!=typeof b?!1:($.each(b,function(b,c){a=a.split("{"+b+"}").join(c)}),a)};